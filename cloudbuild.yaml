steps:
  - name: 'hashicorp/terraform:latest'
    id: 'drift-detection-and-notify'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -e
        
        # Install dependencies
        apk add --no-cache git jq curl bash openssh-client
        
        # Install Terragrunt
        wget -qO /usr/local/bin/terragrunt \
          https://github.com/gruntwork-io/terragrunt/releases/download/v0.88.1/terragrunt_linux_amd64
        chmod +x /usr/local/bin/terragrunt
        
        # Setup SSH
        mkdir -p ~/.ssh
        gcloud secrets versions access latest --secret=${_SSH_KEY_SECRET} > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H github.com gitlab.com bitbucket.org >> ~/.ssh/known_hosts 2>/dev/null
        export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no"
        
        # Initialize variables
        _DRIFT_DETECTED=false
        _DRIFT_REPORT="/workspace/drift_report.txt"
        
        # Create report header
        cat > "$_DRIFT_REPORT" << EOF
        === Terraform/Terragrunt Drift Detection Report ===
        Execution Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        EOF
        
        # Function to check Terraform drift
        check_terraform_drift() {
          local dir=$1
          local rel_path=${dir#/workspace/repos/}
          
          cd "$dir"
          echo "Checking: $rel_path"
          
          if ! terraform init -input=false -no-color > /tmp/init.log 2>&1; then
            echo "  ? Init failed in $rel_path" >> "$_DRIFT_REPORT"
            return 1
          fi
          
          terraform plan -detailed-exitcode -no-color -input=false > /tmp/plan.log 2>&1
          local exit_code=$?
          
          case $exit_code in
            0)
              echo "  ? No drift in $rel_path" >> "$_DRIFT_REPORT"
              ;;
            2)
              echo "  ?? DRIFT DETECTED in $rel_path" >> "$_DRIFT_REPORT"
              echo "" >> "$_DRIFT_REPORT"
              grep -E "^(  [+\-~]|Plan:)" /tmp/plan.log >> "$_DRIFT_REPORT" || true
              echo "" >> "$_DRIFT_REPORT"
              _DRIFT_DETECTED=true
              ;;
            *)
              echo "  ? Plan failed in $rel_path" >> "$_DRIFT_REPORT"
              ;;
          esac
        }
        
        # Function to check Terragrunt drift
        check_terragrunt_drift() {
          local dir=$1
          local rel_path=${dir#/workspace/repos/}
          
          cd "$dir"
          echo "Checking: $rel_path"
          
          if ! terragrunt init --terragrunt-non-interactive > /tmp/init.log 2>&1; then
            echo "  ? Init failed in $rel_path" >> "$_DRIFT_REPORT"
            return 1
          fi
          
          terragrunt plan -detailed-exitcode --terragrunt-non-interactive > /tmp/plan.log 2>&1
          local exit_code=$?
          
          case $exit_code in
            0)
              echo "  ? No drift in $rel_path" >> "$_DRIFT_REPORT"
              ;;
            2)
              echo "  ?? DRIFT DETECTED in $rel_path" >> "$_DRIFT_REPORT"
              echo "" >> "$_DRIFT_REPORT"
              grep -E "^(  [+\-~]|Plan:)" /tmp/plan.log >> "$_DRIFT_REPORT" || true
              echo "" >> "$_DRIFT_REPORT"
              _DRIFT_DETECTED=true
              ;;
            *)
              echo "  ? Plan failed in $rel_path" >> "$_DRIFT_REPORT"
              ;;
          esac
        }
        
        # Process repositories
        echo '${_REPOSITORIES}' | jq -c '.[]' | while IFS= read -r repo; do
          name=$(echo "$repo" | jq -r '.name')
          url=$(echo "$repo" | jq -r '.url')
          branch=$(echo "$repo" | jq -r '.branch')
          type=$(echo "$repo" | jq -r '.type')
          
          echo "" >> "$_DRIFT_REPORT"
          echo "## Repository: $name (branch: $branch)" >> "$_DRIFT_REPORT"
          echo "---" >> "$_DRIFT_REPORT"
          
          repo_dir="/workspace/repos/$name"
          git clone --branch "$branch" --depth 1 "$url" "$repo_dir"
          
          if [ "$type" = "terraform" ]; then
            find "$repo_dir" -name "main.tf" -type f | while read -r tf_file; do
              check_terraform_drift "$(dirname "$tf_file")"
            done
          elif [ "$type" = "terragrunt" ]; then
            find "$repo_dir" -name "terragrunt.hcl" -type f | while read -r tg_file; do
              check_terragrunt_drift "$(dirname "$tg_file")"
            done
          fi
        done
        
        # Display report
        cat "$_DRIFT_REPORT"
        
        # Send notification
        WEBHOOK_URL=$(gcloud secrets versions access latest --secret=${_CHAT_WEBHOOK_SECRET})
        REPORT_ESCAPED=$(cat "$_DRIFT_REPORT" | jq -Rs .)
        
        if [ "$_DRIFT_DETECTED" = true ]; then
          curl -sS -X POST -H 'Content-Type: application/json' "$WEBHOOK_URL" -d @- << EOF
        {
          "text": "?? *Terraform Drift Detected*",
          "cards": [{
            "header": {
              "title": "Drift Detection Report",
              "subtitle": "Issues found in infrastructure"
            },
            "sections": [{
              "widgets": [
                {
                  "textParagraph": {
                    "text": "<font color=\"#FF0000\">Configuration drift detected in one or more repositories.</font>"
                  }
                },
                {
                  "textParagraph": {
                    "text": "<pre>$REPORT_ESCAPED</pre>"
                  }
                },
                {
                  "buttons": [{
                    "textButton": {
                      "text": "View Build Logs",
                      "onClick": {
                        "openLink": {
                          "url": "https://console.cloud.google.com/cloud-build/builds;region=global?project=${PROJECT_ID}"
                        }
                      }
                    }
                  }]
                }
              ]
            }]
          }]
        }
        EOF
        else
          curl -sS -X POST -H 'Content-Type: application/json' "$WEBHOOK_URL" -d '{
            "text": "? *No Drift Detected* - All repositories are in sync with infrastructure."
          }'
        fi
    env:
      - '_SSH_KEY_SECRET=${_SSH_KEY_SECRET}'
      - '_CHAT_WEBHOOK_SECRET=${_CHAT_WEBHOOK_SECRET}'

substitutions:
  _SSH_KEY_SECRET: 'terraform-drift-ssh-key'
  _CHAT_WEBHOOK_SECRET: 'terraform-drift-chat-webhook'
  _REPOSITORIES: '[]'  # JSON array of repo objects

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_MEDIUM'

timeout: '3600s'