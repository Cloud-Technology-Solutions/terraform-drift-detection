steps:
  # Setup SSH for git operations
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'setup-ssh'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir -p /root/.ssh
        gcloud secrets versions access latest --secret=$_SSH_KEY_SECRET > /root/.ssh/id_rsa
        chmod 600 /root/.ssh/id_rsa
        ssh-keyscan github.com >> /root/.ssh/known_hosts
        ssh-keyscan gitlab.com >> /root/.ssh/known_hosts
        ssh-keyscan bitbucket.org >> /root/.ssh/known_hosts
    volumes:
      - name: 'ssh'
        path: /root/.ssh
    secretEnv:
      - '_SSH_KEY_SECRET'

  # Process repositories and detect drift
  - name: 'hashicorp/terraform:latest'
    id: 'drift-detection'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -e
        
        # Install required tools
        apk add --no-cache git jq curl bash openssh-client
        
        # Install Terragrunt
        wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v0.88.1/terragrunt_linux_amd64 -O /usr/local/bin/terragrunt
        chmod +x /usr/local/bin/terragrunt
        
        # Parse repositories from substitution
        echo '${_REPOSITORIES}' > /workspace/repos.json
        _REPOS=$(cat /workspace/repos.json)
        
        _DRIFT_DETECTED=false
        _DRIFT_REPORT="/workspace/drift_report.txt"
        echo "=== Terraform/Terragrunt Drift Detection Report ===" > $_DRIFT_REPORT
        echo "Execution Date: $(date)" >> $_DRIFT_REPORT
        echo "" >> $_DRIFT_REPORT
        
        # Process each repository
        echo "$_REPOS" | jq -c '.[]' | while read repo; do
          _REPO_NAME=$(echo $repo | jq -r '.name')
          _REPO_URL=$(echo $repo | jq -r '.url')
          _REPO_BRANCH=$(echo $repo | jq -r '.branch')
          _REPO_TYPE=$(echo $repo | jq -r '.type')
          
          echo "Processing repository: $_REPO_NAME (branch: $_REPO_BRANCH, type: $_REPO_TYPE)"
          echo "" >> $_DRIFT_REPORT
          echo "## Repository: $_REPO_NAME ($_REPO_BRANCH)" >> $_DRIFT_REPORT
          echo "---" >> $_DRIFT_REPORT
          
          # Clone repository
          _REPO_DIR="/workspace/repos/$_REPO_NAME"
          git clone --branch $_REPO_BRANCH --depth 1 $_REPO_URL $_REPO_DIR
          
          if [ "$_REPO_TYPE" = "terraform" ]; then
            # Find all directories with main.tf
            find $_REPO_DIR -name "main.tf" -type f | while read tf_file; do
              _TF_DIR=$(dirname $tf_file)
              echo "Checking Terraform in: $_TF_DIR"
              
              cd $_TF_DIR
              
              # Initialize Terraform
              terraform init -input=false -no-color > /tmp/init.log 2>&1 || {
                echo "  ? Init failed in $_TF_DIR" >> $_DRIFT_REPORT
                cat /tmp/init.log >> $_DRIFT_REPORT
                continue
              }
              
              # Run Terraform plan
              terraform plan -detailed-exitcode -no-color -input=false > /tmp/plan.log 2>&1
              _PLAN_EXIT=$?
              
              if [ $_PLAN_EXIT -eq 2 ]; then
                echo "  ?? DRIFT DETECTED in $_TF_DIR" >> $_DRIFT_REPORT
                echo "" >> $_DRIFT_REPORT
                grep -E "^(  [\+\-\~]|Plan:)" /tmp/plan.log >> $_DRIFT_REPORT || true
                echo "" >> $_DRIFT_REPORT
                _DRIFT_DETECTED=true
              elif [ $_PLAN_EXIT -eq 0 ]; then
                echo "  ? No drift in $_TF_DIR" >> $_DRIFT_REPORT
              else
                echo "  ? Plan failed in $_TF_DIR" >> $_DRIFT_REPORT
                cat /tmp/plan.log >> $_DRIFT_REPORT
              fi
            done
          
          elif [ "$_REPO_TYPE" = "terragrunt" ]; then
            # Find all directories with terragrunt.hcl
            find $_REPO_DIR -name "terragrunt.hcl" -type f | while read tg_file; do
              _TG_DIR=$(dirname $tg_file)
              echo "Checking Terragrunt in: $_TG_DIR"
              
              cd $_TG_DIR
              
              # Initialize Terragrunt
              terragrunt init --terragrunt-non-interactive > /tmp/init.log 2>&1 || {
                echo "  ? Init failed in $_TG_DIR" >> $_DRIFT_REPORT
                cat /tmp/init.log >> $_DRIFT_REPORT
                continue
              }
              
              # Run Terragrunt plan
              terragrunt plan -detailed-exitcode --terragrunt-non-interactive > /tmp/plan.log 2>&1
              _PLAN_EXIT=$?
              
              if [ $_PLAN_EXIT -eq 2 ]; then
                echo "  ?? DRIFT DETECTED in $_TG_DIR" >> $_DRIFT_REPORT
                echo "" >> $_DRIFT_REPORT
                grep -E "^(  [\+\-\~]|Plan:)" /tmp/plan.log >> $_DRIFT_REPORT || true
                echo "" >> $_DRIFT_REPORT
                _DRIFT_DETECTED=true
              elif [ $_PLAN_EXIT -eq 0 ]; then
                echo "  ? No drift in $_TG_DIR" >> $_DRIFT_REPORT
              else
                echo "  ? Plan failed in $_TG_DIR" >> $_DRIFT_REPORT
                cat /tmp/plan.log >> $_DRIFT_REPORT
              fi
            done
          fi
          
          echo "" >> $_DRIFT_REPORT
        done
        
        # Save drift detection status
        if [ "$_DRIFT_DETECTED" = true ]; then
          echo "_DRIFT_DETECTED" > /workspace/drift_status.txt
        else
          echo "NO_DRIFT" > /workspace/drift_status.txt
        fi
        
        cat $_DRIFT_REPORT
    volumes:
      - name: 'ssh'
        path: /root/.ssh
    env:
      - 'GIT_SSH_COMMAND=ssh -i /root/.ssh/id_rsa -o UserKnownHostsFile=/root/.ssh/known_hosts'

  # Send notification to Google Chat
  - name: 'gcr.io/cloud-builders/curl'
    id: 'send-notification'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        _WEBHOOK_URL=$(gcloud secrets versions access latest --secret=${_CHAT_WEBHOOK_SECRET})
        _DRIFT_STATUS=$(cat /workspace/drift_status.txt)
        _DRIFT_REPORT_CONTENT=$(cat /workspace/drift_report.txt | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
        
        if [ "$_DRIFT_STATUS" = "_DRIFT_DETECTED" ]; then
          curl -X POST -H 'Content-Type: application/json' "$_WEBHOOK_URL" -d "{
            \"text\": \"?? *Terraform Drift Detected*\",
            \"cards\": [{
              \"header\": {
                \"title\": \"Drift Detection Report\",
                \"subtitle\": \"Issues found in infrastructure\"
              },
              \"sections\": [{
                \"widgets\": [{
                  \"textParagraph\": {
                    \"text\": \"<font color=\\\"#FF0000\\\">Configuration drift has been detected in one or more repositories.</font>\"
                  }
                }, {
                  \"textParagraph\": {
                    \"text\": \"<pre>$_DRIFT_REPORT_CONTENT</pre>\"
                  }
                }, {
                  \"buttons\": [{
                    \"textButton\": {
                      \"text\": \"View Build Logs\",
                      \"onClick\": {
                        \"openLink\": {
                          \"url\": \"https://console.cloud.google.com/cloud-build/builds;region=global?project=${_PROJECT_ID}\"
                        }
                      }
                    }
                  }]
                }]
              }]
            }]
          }"
        else
          curl -X POST -H 'Content-Type: application/json' "$_WEBHOOK_URL" -d "{
            \"text\": \"? *No Drift Detected* - All repositories are in sync with infrastructure.\"
          }"
        fi

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_MEDIUM'

timeout: '3600s'

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/terraform-drift-ssh-key/versions/latest
      env: '_SSH_KEY_SECRET'