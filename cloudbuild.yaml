steps:
  # Clone repositories first
  - name: 'gcr.io/cloud-builders/git'
    id: 'clone-repositories'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -e
        
        # Install jq
        apt-get update && apt-get install -y jq
        
        # Setup SSH
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Access SSH key using gcloud
        gcloud secrets versions access latest --secret=${_SSH_KEY_SECRET} > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add known hosts for major git providers
        ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2>/dev/null
        ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts 2>/dev/null
        ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts 2>/dev/null

        export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no"
        
        # Clone all repositories
        echo '${_REPOSITORIES}' | jq -c '.[]' | while IFS= read -r repo; do
          name=$(echo "$repo" | jq -r '.name')
          url=$(echo "$repo" | jq -r '.url')
          branch=$(echo "$repo" | jq -r '.branch')
          
          echo "Cloning repository: $name (branch: $branch)"
          git clone --branch "$branch" --depth 1 "$url" "/workspace/repos/$name"
        done

# Terraform drift detection
  - name: 'alpine:latest'
    id: 'drift-detection'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -e

        # Install dependencies
        apk add --no-cache unzip wget jq bash
        
        # Install Terraform
        wget -qO /tmp/terraform.zip https://releases.hashicorp.com/terraform/${_TERRAFORM_VERSION}/terraform_${_TERRAFORM_VERSION}_linux_amd64.zip
        unzip /tmp/terraform.zip -d /usr/local/bin/
        
        # Install Terragrunt
        wget -qO /usr/local/bin/terragrunt \
          https://github.com/gruntwork-io/terragrunt/releases/download/v${_TERRAGRUNT_VERSION}/terragrunt_linux_amd64
        chmod +x /usr/local/bin/terragrunt
 
        ls -al /usr/local/bin
        echo ${_REPOSITORIES}
    env:
      - '_TERRAFORM_VERSION=${_TERRAFORM_VERSION}'
      - '_TERRAGRUNT_VERSION=${_TERRAGRUNT_VERSION}'

  # Send notifications
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'send-notification'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        
        # Install jq for JSON processing
        apt-get update && apt-get install -y jq
        
        # Read variables
        _DRIFT_DETECTED=$(cat /workspace/drift_detected.txt)
        _DRIFT_REPORT="/workspace/drift_report.txt"
        _WEBHOOK_URL=$(gcloud secrets versions access latest --secret=${_CHAT_WEBHOOK_SECRET})
        _REPORT_CONTENT=$(cat "$$_DRIFT_REPORT" | jq -Rs .)
        
        if [ "$$_DRIFT_DETECTED" = "true" ]; then
          curl -sS -X POST -H 'Content-Type: application/json' "$$_WEBHOOK_URL" -d @- << EOF
        {
          "text": "?? *Terraform Drift Detected*",
          "cards": [{
            "header": {
              "title": "Drift Detection Report",
              "subtitle": "Issues found in infrastructure"
            },
            "sections": [{
              "widgets": [
                {
                  "textParagraph": {
                    "text": "<font color=\"#FF0000\">Configuration drift detected in one or more repositories.</font>"
                  }
                },
                {
                  "textParagraph": {
                    "text": $$_REPORT_CONTENT
                  }
                },
                {
                  "buttons": [{
                    "textButton": {
                      "text": "View Build Logs",
                      "onClick": {
                        "openLink": {
                          "url": "https://console.cloud.google.com/cloud-build/builds;region=global?project=${PROJECT_ID}"
                        }
                      }
                    }
                  }]
                }
              ]
            }]
          }]
        }
        EOF
        else
          curl -sS -X POST -H 'Content-Type: application/json' "$$_WEBHOOK_URL" -d '{
            "text": "? *No Drift Detected* - All repositories are in sync with infrastructure."
          }'
        fi
        
        echo "Notification sent successfully"
    env:
      - '_CHAT_WEBHOOK_SECRET=${_CHAT_WEBHOOK_SECRET}'

substitutions:
  _TERRAFORM_VERSION: '1.5.7'
  _TERRAGRUNT_VERSION: '0.88.1'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_MEDIUM'

timeout: '3600s'